on: [push, pull_request, workflow_dispatch]

env:
  DOCKER_USER_OPTION: '$UID:$GID'
  PROJECT_NAME: Jorian840

name: Build
jobs:
  generate:
    runs-on: ubuntu-latest
    name: Generate
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: xanantis/docker-file-ownership-fix@v1
      - name: Run build script
        run: |
            chmod +x build.sh
            ./build.sh
        shell: bash
      - name: Persist gerbers
        uses: actions/upload-artifact@v2
        with:
          name: ${{ PROJECT_NAME }}_gerbers
          path: gerbers
      - name: Persist images
        uses: actions/upload-artifact@v2
        with:
          name: ${{ PROJECT_NAME }}_images
          path: images
      - name: Persist case files
        uses: actions/upload-artifact@v2
        with:
          name: ${{ PROJECT_NAME }}_case_files
          path: dxf
        
          
  image_matrix:
    runs-on: ubuntu-latest
    name: Image matrix
    needs: generate
    outputs: 
        matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
     - uses: actions/download-artifact@master
       with:
         name: ${{ PROJECT_NAME }}_images
         path: images
     - id: setmatrix
       run: |
         matrixArray=$(find ./images -name '*.png') # Creates array of all image files
         # Start Generate JSON String
         echo "$matrixArray" | \
         jq --slurp --raw-input 'split("\n")[:-1]' | \
         jq  "{\"filepath\": .[] }" | \
         jq -sc "{ \"include\": . }" > tmp
         cat ./tmp
         # End Generate JSON String
         matrixStringifiedObject=$(cat ./tmp) # Use this as jq @sh wasn't cooperating
         echo "::set-output name=matrix::$matrixStringifiedObject"
    
  gerber_matrix:
    runs-on: ubuntu-latest
    name: Gerber matrix
    needs: generate
    outputs: 
        matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
     - uses: actions/download-artifact@master
       with:
         name: ${{ PROJECT_NAME }}_gerbers
         path: gerbers
     - id: setmatrix
       run: |
         matrixArray=$(find ./gerbers -name '*.zip') # Creates array of all gerber files
         # Start Generate JSON String
         echo "$matrixArray" | \
         jq --slurp --raw-input 'split("\n")[:-1]' | \
         jq  "{\"filepath\": .[] }" | \
         jq -sc "{ \"include\": . }" > tmp
         cat ./tmp
         # End Generate JSON String
         matrixStringifiedObject=$(cat ./tmp) # Use this as jq @sh wasn't cooperating
         echo "::set-output name=matrix::$matrixStringifiedObject"
    
  upload_gerbers:
    runs-on: ubuntu-latest
    name: Upload gerbers
    needs: [generate, gerber_matrix]
    strategy:
        matrix: ${{fromJson(needs.gerber_matrix.outputs.matrix)}}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: ${{ PROJECT_NAME }}_gerbers
          path: gerbers
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload gerbers
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          overwrite: true
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.filepath }}
          asset_name: ${{ matrix.filepath }}
          
  upload_images:
    runs-on: ubuntu-latest
    name: Upload images
    needs: [generate, image_matrix]
    strategy:
        matrix: ${{fromJson(needs.image_matrix.outputs.matrix)}}
    steps:
      - uses: actions/download-artifact@master
        with:
          name: ${{ PROJECT_NAME }}_images
          path: images
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload images
        uses: shogo82148/actions-upload-release-asset@v1                
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          overwrite: true
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.filepath }}
          asset_name: ${{ matrix.filepath }}
          
  upload_case_files:
    runs-on: ubuntu-latest
    name: Upload case DXF files
    needs: generate
    steps:
      - uses: actions/download-artifact@master
        with:
          name: ${{ PROJECT_NAME }}_case_files
          path: dxf
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}      
      - name: Upload case files
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          overwrite: true
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ./dxf/case_files.zip
          asset_name: case_files.zip